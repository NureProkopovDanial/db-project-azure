// generateData.js
'use strict';
const { MongoClient, ObjectId } = require('mongodb');
const faker = require('faker');
const passwordHash = require('password-hash');
const config = require('./config.js');

const MONGO_URI = config.cosmosDB.connectionString;
const DB_NAME = config.cosmosDB.authDBName || "AuthDB";

// üîß –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
const NUM_USERS = 1000;
const NUM_SCHOOLS_PER_USER = 10;
const BATCH_SIZE = 250;                  // üöÄ –ó–±—ñ–ª—å—à–µ–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–∞–∫–µ—Ç—É x250
const DELETE_BATCH_SIZE = 500;           // üóëÔ∏è –ï—Ñ–µ–∫—Ç–∏–≤–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
const RETRY_ATTEMPTS = 8;                // üîÅ –ë—ñ–ª—å—à–µ —Å–ø—Ä–æ–±
const INITIAL_RETRY_DELAY = 1500;        // ‚è≥ –†–æ–∑—É–º–Ω—ñ –∑–∞—Ç—Ä–∏–º–∫–∏
const BASE_DELAY = 300;

let currentDelay = BASE_DELAY;

faker.locale = 'uk';

function getHashedPassword(plainPassword) {
  return passwordHash.generate(plainPassword, {
    algorithm: 'sha256',
    saltLength: 16,
    iterations: 1000
  });
}

const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// üåü –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∑ —Ä–µ—Ç—Ä–∞—è–º–∏
async function insertWithRetry(collection, data, attempt = 1) {
    try {
        const result = await collection.insertMany(data, { ordered: false });
        
        // üéöÔ∏è –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ —Ä–µ–≥—É–ª—é–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏
        currentDelay = Math.max(BASE_DELAY, currentDelay - 25);
        return result.insertedIds;

    } catch (err) {
        if (err.code === 16500 && attempt <= RETRY_ATTEMPTS) {
            const delay = INITIAL_RETRY_DELAY * Math.pow(2, attempt - 1);
            console.warn(`‚ö†Ô∏è Rate limit! Waiting ${delay}ms... (Attempt ${attempt})`);
            
            currentDelay += 200;
            await sleep(delay);

            // üéØ –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ–≤–¥–∞–ª–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
            const failedIndexes = new Set(err.writeErrors.map(e => e.index));
            const failedDocs = data.filter((_, i) => failedIndexes.has(i));

            return insertWithRetry(collection, failedDocs, attempt + 1);
        } 
        throw err;
    }
}

// üßπ –ï—Ñ–µ–∫—Ç–∏–≤–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
async function deleteWithRetry(collection) {
    try {
        let totalDeleted = 0;
        while (true) {
            const docs = await collection.find().limit(DELETE_BATCH_SIZE).toArray();
            if (!docs.length) break;
            
            const ids = docs.map(d => d._id);
            const { deletedCount } = await collection.deleteMany({ _id: { $in: ids } });
            
            totalDeleted += deletedCount;
            console.log(`‚ôªÔ∏è Deleted ${deletedCount} from ${collection.collectionName}`);
            
            await sleep(currentDelay);
        }
        return totalDeleted;
    } catch (err) {
        if (err.code === 16500) {
            console.warn(`‚ö†Ô∏è Delete rate limit! Retrying...`);
            await sleep(INITIAL_RETRY_DELAY);
            return deleteWithRetry(collection);
        }
        throw err;
    }
}

async function generateData() {
    const client = new MongoClient(MONGO_URI);
    
    try {
        await client.connect();
        console.log('üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');
        
        const db = client.db(DB_NAME);
        const [usersCollection, schoolsCollection] = await Promise.all([
            db.collection('users'),
            db.collection('schools')
        ]);

        // üßº –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö
        console.log('\nüßπ –ü–æ—á–∞—Ç–æ–∫ –æ—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏...');
        const [deletedUsers, deletedSchools] = await Promise.all([
            deleteWithRetry(usersCollection),
            deleteWithRetry(schoolsCollection)
        ]);
        console.log(`\n‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ: 
        - ${deletedUsers} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        - ${deletedSchools} —à–∫—ñ–ª`);

        // üë• –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        console.log('\nüë• –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...');
        const users = Array.from({length: NUM_USERS}, () => ({
            UserName: faker.internet.userName(),
            Password: getHashedPassword(faker.internet.password()),
            Role: 'Admin',
            schools: []
        }));

        // üöÄ –ü–∞–∫–µ—Ç–Ω–∞ –≤—Å—Ç–∞–≤–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        let insertedUsers = 0;
        while (insertedUsers < users.length) {
            const batch = users.slice(insertedUsers, insertedUsers + BATCH_SIZE);
            await insertWithRetry(usersCollection, batch);
            insertedUsers += batch.length;
            console.log(`üì¶ –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${insertedUsers}/${users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
            await sleep(currentDelay);
        }

        // üè´ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —à–∫—ñ–ª
        console.log('\nüè´ –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —à–∫—ñ–ª...');
        const totalSchools = NUM_USERS * NUM_SCHOOLS_PER_USER;
        const schools = Array.from({length: totalSchools}, () => ({
            SchoolName: faker.company.companyName(),
            SchoolId: faker.datatype.number({ min: 10000, max: 99999 }),
            DeanName: faker.name.findName(),
            Email: faker.internet.email()
        }));

        // üì¶ –ü–∞–∫–µ—Ç–Ω–∞ –≤—Å—Ç–∞–≤–∫–∞ —à–∫—ñ–ª
        let insertedSchools = 0;
        while (insertedSchools < schools.length) {
            const batch = schools.slice(insertedSchools, insertedSchools + BATCH_SIZE);
            await insertWithRetry(schoolsCollection, batch);
            insertedSchools += batch.length;
            console.log(`üìö –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${insertedSchools}/${schools.length} —à–∫—ñ–ª`);
            await sleep(currentDelay);
        }

        // üîó –ó–≤'—è–∑—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —à–∫–æ–ª–∞–º–∏
        console.log('\nüîó –ü–æ—á–∞—Ç–æ–∫ –∑–≤\'—è–∑—É–≤–∞–Ω–Ω—è...');
        const allSchools = await schoolsCollection.find().toArray();
        const updateOperations = [];
        
        for (let i = 0; i < users.length; i++) {
            const startIdx = i * NUM_SCHOOLS_PER_USER;
            const endIdx = startIdx + NUM_SCHOOLS_PER_USER;
            const schoolIds = allSchools
                .slice(startIdx, endIdx)
                .map(s => s._id);

            updateOperations.push({
                updateOne: {
                    filter: { _id: users[i]._id },
                    update: { $set: { schools: schoolIds } }
                }
            });

            // –ü–∞–∫–µ—Ç–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 500 –æ–ø–µ—Ä–∞—Ü—ñ–π
            if (updateOperations.length === 500) {
                await usersCollection.bulkWrite(updateOperations);
                updateOperations.length = 0;
                console.log(`üîÅ –û–Ω–æ–≤–ª–µ–Ω–æ ${i + 1}/${users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
            }
        }

        // –§—ñ–Ω–∞–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
        if (updateOperations.length > 0) {
            await usersCollection.bulkWrite(updateOperations);
            console.log(`üéâ –û–Ω–æ–≤–ª–µ–Ω–æ –≤—Å—ñ—Ö ${users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!`);
        }

        console.log('\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    } catch (err) {
        console.error('\n‚ÄºÔ∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', err);
    } finally {
        await client.close();
        console.log('\nüîå –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ MongoDB');
    }
}

generateData();